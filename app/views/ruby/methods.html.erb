<section class="wrapper">
  <h1>Private vs. Protected</h1>

  <main class="group">
    <section class="method group">
      <article class="code"><%= @public %></article>
      <article class="description">
        <h2>Public Methods</h2>
<pre class='snippet'>
  sennacy = Cat.new("Sennacy")
</pre>

        <p>
          We know public methods. We can call them explicitly on any instance of the class.
        </p>

<pre class='snippet'>
  sennacy.meow #=> "meow"
  sennacy.say_name #=> "meow"; "Sennacy"
</pre>
      </article>
    </section>

    <section class="method group">
      <article class="code"><%= @private %></article>
      <article class="description">
        <h2>Private Methods</h2>
<pre class='snippet'>
  conz = RealWorldAdult.new
  conz.pay_taxes #=> "sob uncontrollably"
</pre>

        <p>
          Here, <code>RealWorldAdult#pay_taxes</code> is an instance method, so we can call it on any instance as well. However, internally, the instance is calling PRIVATE methods in order to execute the method. We made these particular methods private because they're our secret methods that we don't need outsiders to be aware of. Only the instance can call them internally.
        </p>

<pre class='snippet'>
  conz.send_government(1000000) #=> ERROR
  conz.cry #=> ERROR
</pre>

        <p>
          We shouldn't be able to coerce <code>conz.send_government(1000000)</code>, but if we call <code>conz.pay_taxes</code>, she'll execute <code>RealWorldAdult#send_government</code>. Likewise, we shouldn't be able to just call <code>conz.cry</code> and make her cry on cue, but if we call <code>RealWorldAdult#pay_taxes</code> on her, internally, she'll cry.
        </p>
      </article>
    </section>

    <section class="method group">
      <article class="code"><%= @protected %></article>
      <article class="description">
        <h2>Protected Methods</h2>
<pre class='snippet'>
  dylan = PopularKid.new
  ashley = PopularKid.new
  dylan.meet(ashley)
</pre>

        <p>
          This time, this method is calling <code>PopularKid#say_hey</code>. It has the properties of a private method because PopularKid doesn't expose this method to the outside world. However, in this case, we need to call this method on OTHER instances of the same class. If <code>PopularKid#say_hey</code> was private, we wouldn't be able to call <code>PopularKid#say_hey</code> on <code>self</code> or <code>popular_kid</code> at all. Therefore, the method is PROTECTED.
        </p>

<pre class='snippet'>
  dylan.say_hey #=> ERROR
  ashley.say_hey #=> ERROR
</pre>

        <p>
          In other words, all the other PopularKids whom Dylan meets can <code>say_hey</code> to each other, but no one outside of the class can.
        </p>
      </article>
    </section>

  <section class='summary'>
    <h2>Summary</h2>

    <ul>
      <li>
        <strong>Private:</strong>
        secret methods that each instance uses internally (most commonly helper methods); cannot be explicitly called
      </li>

      <li>
        <strong>Protected:</strong>
        secret methods that only other instances of the same class can explicitly call when they're inside of the class
      </li>
    </ul>
  </section>

  <aside class='bonus'>
    <h3>
      Bonus tidbit:
      Explicit Receivers vs. Implicit Receivers
    </h3>

    <ul class='group'>
      <li>
        <strong>Explicit Receiver</strong>
        The object that a method is called on
<pre class='snippet'>
class Cat
  def initialize
    self.meow
    # explicit receiver => self
  end

  def meow
    ...
  end
end
</pre>
      </li>

      <li>
        <strong>Implicit Receiver</strong>
        The inferred object that a method is a called on
<pre class='snippet'>
class Cat
  def initialize
    meow
    # no explicit receiver!
    # implicit receiver => self
  end

  def meow
    ...
  end
end
</pre>
      </li>
    </ul>

    <footer>
      Private methods <em>cannot have an explicit receiver</em>, while protected methods are private methods that can take an explicit receiver.
    </footer>
  </aside>
</section>
